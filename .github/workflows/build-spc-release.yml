name: Build Standalone SPC Binaries

on:
  release:
    types:
      - published
  workflow_dispatch:

jobs:
  build-release-artifacts:
    name: "Build Standalone SPC Binaries"
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        php-version:
          - "8.1"
        operating-system:
          - "ubuntu-latest"
          - "macos-latest"
          - "debian-arm64-self-hosted"
          - "macos-arm64-self-hosted"
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4"
        with:
          repository: crazywhalecc/static-php-cli

      - name: Convert OS Name
        id: os-type
        run: |
          OS=""
          if [ "${{ matrix.operating-system }}" = "ubuntu-latest" ]; then
              OS="linux-x86_64"
          elif [ "${{ matrix.operating-system }}" = "macos-latest" ]; then
              OS="macos-x86_64"
          elif [ "${{ matrix.operating-system }}" = "debian-arm64-self-hosted" ]; then
              OS="linux-aarch64"
          elif [ "${{ matrix.operating-system }}" = "macos-arm64-self-hosted" ]; then
              OS="macos-aarch64"
          fi
          echo "OS=$OS" >> $GITHUB_ENV

      - if: ${{ matrix.operating-system == 'macos-latest' || matrix.operating-system == 'ubuntu-latest' }}
        name: "Install PHP for official runners"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: none
          tools: composer:v2
          php-version: "${{ matrix.php-version }}"
          ini-values: memory_limit=-1

      - name: "Get Composer Cache Directory"
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: "Cache Composer dependencies"
        uses: "actions/cache@v3"
        with:
          path: "${{ steps.composer-cache.outputs.dir }}"
          key: "php-${{ matrix.php-version }}-locked-composer-${{ hashFiles('**/composer.lock') }}"
          restore-keys: |
            php-${{ matrix.php-version }}-locked-composer-
      - name: "Install Locked Dependencies"
        run: "composer install --no-interaction --no-progress"

      - id: cache-download-spc-necessary
        name: "Cache Downloaded Sources"
        uses: actions/cache@v3
        with:
          path: downloads
          key: spc-dependencies

      - if: steps.cache-download-spc-necessary.outputs.cache-hit != 'true'
        name: "Download Sources"
        env:
          GITHUB_TOKEN: ${{ secrets.S_GITHUB_TOKEN }}
        run: bin/spc download --with-php=${{ matrix.php-version }} php-src,micro,pkg-config,onig,zlib --debug

      - name: "Build micro.sfx"
        run: |
          SPC_USE_SUDO=yes bin/spc doctor --auto-fix
          bin/spc build pcntl,posix,mbstring,tokenizer,phar --build-micro --debug

      - name: "Build PHAR File"
        run: "composer build:phar"

      - name: "Generate Executable"
        run: "bin/spc micro:combine spc.phar -O spc"

      - name: "Archive Executable"
        run: |
          tar -czf spc-$OS.tar.gz spc
          echo "filename=spc-$OS.tar.gz" >> $GITHUB_ENV
          echo "OS=$OS" >> $GITHUB_ENV

      - name: "Test Micro file"
        run: "./spc dev:extensions && mkdir dist/ && cp ${{ env.filename }} dist/"

      - name: "Deploy to Self-Hosted Server"
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SERVER_SECRET_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
          REMOTE_PORT: ${{ secrets.DEPLOY_SERVER_PORT }}
          REMOTE_USER: ${{ secrets.DEPLOY_SERVER_USER }}
          TARGET: ${{ secrets.DEPLOY_SERVER_TARGET_SPC_NIGHTLY }}

      - name: "Upload SPC Binary to GitHub Release"
        uses: softprops/action-gh-release@v1
        if: ${{startsWith(github.ref, 'refs/tags/') }}
        with:
          files: ${{ env.filename }}

      - name: "Upload Actions Artifact"
        uses: actions/upload-artifact@v3
        with:
          path: spc
          name: spc-${{ env.OS }}
